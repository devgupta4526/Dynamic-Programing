class Solution {
    public int coinChange(int[] coins, int amount) {
//         int ans = recursion(coins , amount);
//         if(ans == Integer.MAX_VALUE)
//               return -1;
//         return ans;
        
        // int [] dp = new int[amount+1];
        // for(int i = 0 ; i < dp.length ; i++){
        //     dp[i] = -1;
        // }
        // int ans = bottomUp(coins , amount, dp);
        // if(ans == Integer.MAX_VALUE)
        //       return -1;
        // else
        //    return ans;
        
        return bottomDown(coins , amount);
        
        
    }
    
    public int recursion(int [] coins , int amount){
        if(amount == 0){
            return 0; 
        }
        if(amount < 0){
            return Integer.MAX_VALUE;
        }
        int min = Integer.MAX_VALUE;
        
        for(int i = 0 ; i < coins.length ; i++){
            int ans = recursion(coins , amount - coins[i]);
            if(ans != Integer.MAX_VALUE){
                min = Math.min(min , ans +1);
            }
        }
        return min;
    }
    
    
    public int bottomUp(int [] coins , int amount , int [] dp){
        if(amount == 0){
            return 0; 
        }
        if(amount < 0){
            return Integer.MAX_VALUE;
        }
        
        if(dp[amount] != -1){
            return dp[amount];
        }
        int min = Integer.MAX_VALUE;
        
        for(int i = 0 ; i < coins.length ; i++){
            int ans = recursion(coins , amount - coins[i]);
            if(ans != Integer.MAX_VALUE){
                min = Math.min(min , ans +1);
            }
        }
        dp[amount] = min;
        return min;
    }
    
    public int bottomDown(int [] coins , int amount){
        int [] dp = new int [amount +1];
       Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i = 1 ; i <= amount ; i++){
            for(int j = 0 ; j < coins.length ; j++){
                if(i - coins[j] >= 0&& dp[i-coins[j]] != Integer.MAX_VALUE){
                      dp[i] = Math.min(dp[i], dp[i-coins[j]]+1);
                }
            }
        }
        if(dp[amount] != Integer.MAX_VALUE){
            return dp[amount];
        }
        else{
            return -1;
        }
    }
    

}
