class Solution {
    //1.First Develop a Recursive Solution
    //2.Then Apply Bottom Up
    //3.Bottom Down 
    //4.Space Optimization
    
    public int minCostClimbingStairs(int[] cost) {
        // int n = cost.length;
        // int ans = Math.min(recursive(cost,n-1),recursive(cost,n-2));
        //***********************************************
       //  int n = cost.length;
       //  int [] dp = new int [n];
       //  for(int i = 0 ; i < n ; i++){
       //      dp[i] = -1;
       //  }
       // int ans = Math.min(bottomUp(cost,n-1,dp),bottomUp(cost,n-2,dp));
       //  return ans;
        //*********************************************************
        //  int n = cost.length;
        // return bottomDown(cost , n);
        //*****************************************
          int n = cost.length;
        return spaceOptimized(cost , n);
        
    }
    
    public int recursive(int [] cost , int n){
        if(n == 0){
            return cost[0];
        }
        if(n == 1){
            return cost[1];
        }
        
        int ans = cost[n] + Math.min(recursive(cost,n-1),recursive(cost,n-2));
        return ans;
    }
    
    public int bottomUp(int [] cost ,int  n , int [] dp){
        if(n == 0){
            return cost[0];
        }
        if(n == 1){
            return cost[1];
        }
        
        if(dp[n] != -1){
            return dp[n];
        }
        
        dp[n] = cost[n] + Math.min(bottomUp(cost,n-1 ,dp),bottomUp(cost,n-2,dp));
        return dp[n];
    } 
    
    public int bottomDown(int [] cost , int n){
        int [] dp = new int [n+1];
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        for(int i = 2 ; i < n ; i++){
          dp[i] = cost[i] + Math.min(dp[i-1],dp[i-2]);
        }
        
        return Math.min(dp[n-1],dp[n-2]);
        
    }
    public int spaceOptimized(int [] cost , int n){
      
       int  prev2 = cost[0];
        int prev1 = cost[1];
        
        for(int i = 2 ; i < n ; i++){
          int curr = cost[i] + Math.min(prev1,prev2);
            prev2 = prev1;
            prev1 = curr;
        }
        
        return Math.min(prev1 ,prev2);
        
    }
}
